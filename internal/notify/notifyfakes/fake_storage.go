// Code generated by counterfeiter. DO NOT EDIT.
package notifyfakes

import (
	"context"
	"sync"

	"gitlab.eclipse.org/eclipse/xfsc/tsa/policy/internal/notify"
	"gitlab.eclipse.org/eclipse/xfsc/tsa/policy/internal/storage"
)

type FakeStorage struct {
	PolicySubscribersStub        func(context.Context, string, string, string, string) ([]*storage.Subscriber, error)
	policySubscribersMutex       sync.RWMutex
	policySubscribersArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 string
	}
	policySubscribersReturns struct {
		result1 []*storage.Subscriber
		result2 error
	}
	policySubscribersReturnsOnCall map[int]struct {
		result1 []*storage.Subscriber
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStorage) PolicySubscribers(arg1 context.Context, arg2 string, arg3 string, arg4 string, arg5 string) ([]*storage.Subscriber, error) {
	fake.policySubscribersMutex.Lock()
	ret, specificReturn := fake.policySubscribersReturnsOnCall[len(fake.policySubscribersArgsForCall)]
	fake.policySubscribersArgsForCall = append(fake.policySubscribersArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.PolicySubscribersStub
	fakeReturns := fake.policySubscribersReturns
	fake.recordInvocation("PolicySubscribers", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.policySubscribersMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStorage) PolicySubscribersCallCount() int {
	fake.policySubscribersMutex.RLock()
	defer fake.policySubscribersMutex.RUnlock()
	return len(fake.policySubscribersArgsForCall)
}

func (fake *FakeStorage) PolicySubscribersCalls(stub func(context.Context, string, string, string, string) ([]*storage.Subscriber, error)) {
	fake.policySubscribersMutex.Lock()
	defer fake.policySubscribersMutex.Unlock()
	fake.PolicySubscribersStub = stub
}

func (fake *FakeStorage) PolicySubscribersArgsForCall(i int) (context.Context, string, string, string, string) {
	fake.policySubscribersMutex.RLock()
	defer fake.policySubscribersMutex.RUnlock()
	argsForCall := fake.policySubscribersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeStorage) PolicySubscribersReturns(result1 []*storage.Subscriber, result2 error) {
	fake.policySubscribersMutex.Lock()
	defer fake.policySubscribersMutex.Unlock()
	fake.PolicySubscribersStub = nil
	fake.policySubscribersReturns = struct {
		result1 []*storage.Subscriber
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) PolicySubscribersReturnsOnCall(i int, result1 []*storage.Subscriber, result2 error) {
	fake.policySubscribersMutex.Lock()
	defer fake.policySubscribersMutex.Unlock()
	fake.PolicySubscribersStub = nil
	if fake.policySubscribersReturnsOnCall == nil {
		fake.policySubscribersReturnsOnCall = make(map[int]struct {
			result1 []*storage.Subscriber
			result2 error
		})
	}
	fake.policySubscribersReturnsOnCall[i] = struct {
		result1 []*storage.Subscriber
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.policySubscribersMutex.RLock()
	defer fake.policySubscribersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStorage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ notify.Storage = new(FakeStorage)
