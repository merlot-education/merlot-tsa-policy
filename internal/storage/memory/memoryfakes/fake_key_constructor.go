// Code generated by counterfeiter. DO NOT EDIT.
package memoryfakes

import (
	"sync"

	"gitlab.eclipse.org/eclipse/xfsc/tsa/policy/internal/storage/memory"
)

type FakeKeyConstructor struct {
	ConstructKeyStub        func(string, string, string, string) string
	constructKeyMutex       sync.RWMutex
	constructKeyArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}
	constructKeyReturns struct {
		result1 string
	}
	constructKeyReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeKeyConstructor) ConstructKey(arg1 string, arg2 string, arg3 string, arg4 string) string {
	fake.constructKeyMutex.Lock()
	ret, specificReturn := fake.constructKeyReturnsOnCall[len(fake.constructKeyArgsForCall)]
	fake.constructKeyArgsForCall = append(fake.constructKeyArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.ConstructKeyStub
	fakeReturns := fake.constructKeyReturns
	fake.recordInvocation("ConstructKey", []interface{}{arg1, arg2, arg3, arg4})
	fake.constructKeyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeKeyConstructor) ConstructKeyCallCount() int {
	fake.constructKeyMutex.RLock()
	defer fake.constructKeyMutex.RUnlock()
	return len(fake.constructKeyArgsForCall)
}

func (fake *FakeKeyConstructor) ConstructKeyCalls(stub func(string, string, string, string) string) {
	fake.constructKeyMutex.Lock()
	defer fake.constructKeyMutex.Unlock()
	fake.ConstructKeyStub = stub
}

func (fake *FakeKeyConstructor) ConstructKeyArgsForCall(i int) (string, string, string, string) {
	fake.constructKeyMutex.RLock()
	defer fake.constructKeyMutex.RUnlock()
	argsForCall := fake.constructKeyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeKeyConstructor) ConstructKeyReturns(result1 string) {
	fake.constructKeyMutex.Lock()
	defer fake.constructKeyMutex.Unlock()
	fake.ConstructKeyStub = nil
	fake.constructKeyReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeKeyConstructor) ConstructKeyReturnsOnCall(i int, result1 string) {
	fake.constructKeyMutex.Lock()
	defer fake.constructKeyMutex.Unlock()
	fake.ConstructKeyStub = nil
	if fake.constructKeyReturnsOnCall == nil {
		fake.constructKeyReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.constructKeyReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeKeyConstructor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.constructKeyMutex.RLock()
	defer fake.constructKeyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeKeyConstructor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ memory.KeyConstructor = new(FakeKeyConstructor)
