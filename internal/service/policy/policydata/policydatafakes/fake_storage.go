// Code generated by counterfeiter. DO NOT EDIT.
package policydatafakes

import (
	"context"
	"sync"
	"time"

	"gitlab.com/gaia-x/data-infrastructure-federation-services/tsa/policy/internal/service/policy/policydata"
	"gitlab.com/gaia-x/data-infrastructure-federation-services/tsa/policy/internal/storage"
)

type FakeStorage struct {
	GetRefreshPoliciesStub        func(context.Context) ([]*storage.Policy, error)
	getRefreshPoliciesMutex       sync.RWMutex
	getRefreshPoliciesArgsForCall []struct {
		arg1 context.Context
	}
	getRefreshPoliciesReturns struct {
		result1 []*storage.Policy
		result2 error
	}
	getRefreshPoliciesReturnsOnCall map[int]struct {
		result1 []*storage.Policy
		result2 error
	}
	PostponeRefreshStub        func(context.Context, []*storage.Policy) error
	postponeRefreshMutex       sync.RWMutex
	postponeRefreshArgsForCall []struct {
		arg1 context.Context
		arg2 []*storage.Policy
	}
	postponeRefreshReturns struct {
		result1 error
	}
	postponeRefreshReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateNextRefreshTimeStub        func(context.Context, *storage.Policy, time.Time) error
	updateNextRefreshTimeMutex       sync.RWMutex
	updateNextRefreshTimeArgsForCall []struct {
		arg1 context.Context
		arg2 *storage.Policy
		arg3 time.Time
	}
	updateNextRefreshTimeReturns struct {
		result1 error
	}
	updateNextRefreshTimeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStorage) GetRefreshPolicies(arg1 context.Context) ([]*storage.Policy, error) {
	fake.getRefreshPoliciesMutex.Lock()
	ret, specificReturn := fake.getRefreshPoliciesReturnsOnCall[len(fake.getRefreshPoliciesArgsForCall)]
	fake.getRefreshPoliciesArgsForCall = append(fake.getRefreshPoliciesArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetRefreshPoliciesStub
	fakeReturns := fake.getRefreshPoliciesReturns
	fake.recordInvocation("GetRefreshPolicies", []interface{}{arg1})
	fake.getRefreshPoliciesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStorage) GetRefreshPoliciesCallCount() int {
	fake.getRefreshPoliciesMutex.RLock()
	defer fake.getRefreshPoliciesMutex.RUnlock()
	return len(fake.getRefreshPoliciesArgsForCall)
}

func (fake *FakeStorage) GetRefreshPoliciesCalls(stub func(context.Context) ([]*storage.Policy, error)) {
	fake.getRefreshPoliciesMutex.Lock()
	defer fake.getRefreshPoliciesMutex.Unlock()
	fake.GetRefreshPoliciesStub = stub
}

func (fake *FakeStorage) GetRefreshPoliciesArgsForCall(i int) context.Context {
	fake.getRefreshPoliciesMutex.RLock()
	defer fake.getRefreshPoliciesMutex.RUnlock()
	argsForCall := fake.getRefreshPoliciesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStorage) GetRefreshPoliciesReturns(result1 []*storage.Policy, result2 error) {
	fake.getRefreshPoliciesMutex.Lock()
	defer fake.getRefreshPoliciesMutex.Unlock()
	fake.GetRefreshPoliciesStub = nil
	fake.getRefreshPoliciesReturns = struct {
		result1 []*storage.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) GetRefreshPoliciesReturnsOnCall(i int, result1 []*storage.Policy, result2 error) {
	fake.getRefreshPoliciesMutex.Lock()
	defer fake.getRefreshPoliciesMutex.Unlock()
	fake.GetRefreshPoliciesStub = nil
	if fake.getRefreshPoliciesReturnsOnCall == nil {
		fake.getRefreshPoliciesReturnsOnCall = make(map[int]struct {
			result1 []*storage.Policy
			result2 error
		})
	}
	fake.getRefreshPoliciesReturnsOnCall[i] = struct {
		result1 []*storage.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) PostponeRefresh(arg1 context.Context, arg2 []*storage.Policy) error {
	var arg2Copy []*storage.Policy
	if arg2 != nil {
		arg2Copy = make([]*storage.Policy, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.postponeRefreshMutex.Lock()
	ret, specificReturn := fake.postponeRefreshReturnsOnCall[len(fake.postponeRefreshArgsForCall)]
	fake.postponeRefreshArgsForCall = append(fake.postponeRefreshArgsForCall, struct {
		arg1 context.Context
		arg2 []*storage.Policy
	}{arg1, arg2Copy})
	stub := fake.PostponeRefreshStub
	fakeReturns := fake.postponeRefreshReturns
	fake.recordInvocation("PostponeRefresh", []interface{}{arg1, arg2Copy})
	fake.postponeRefreshMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStorage) PostponeRefreshCallCount() int {
	fake.postponeRefreshMutex.RLock()
	defer fake.postponeRefreshMutex.RUnlock()
	return len(fake.postponeRefreshArgsForCall)
}

func (fake *FakeStorage) PostponeRefreshCalls(stub func(context.Context, []*storage.Policy) error) {
	fake.postponeRefreshMutex.Lock()
	defer fake.postponeRefreshMutex.Unlock()
	fake.PostponeRefreshStub = stub
}

func (fake *FakeStorage) PostponeRefreshArgsForCall(i int) (context.Context, []*storage.Policy) {
	fake.postponeRefreshMutex.RLock()
	defer fake.postponeRefreshMutex.RUnlock()
	argsForCall := fake.postponeRefreshArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStorage) PostponeRefreshReturns(result1 error) {
	fake.postponeRefreshMutex.Lock()
	defer fake.postponeRefreshMutex.Unlock()
	fake.PostponeRefreshStub = nil
	fake.postponeRefreshReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) PostponeRefreshReturnsOnCall(i int, result1 error) {
	fake.postponeRefreshMutex.Lock()
	defer fake.postponeRefreshMutex.Unlock()
	fake.PostponeRefreshStub = nil
	if fake.postponeRefreshReturnsOnCall == nil {
		fake.postponeRefreshReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.postponeRefreshReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) UpdateNextRefreshTime(arg1 context.Context, arg2 *storage.Policy, arg3 time.Time) error {
	fake.updateNextRefreshTimeMutex.Lock()
	ret, specificReturn := fake.updateNextRefreshTimeReturnsOnCall[len(fake.updateNextRefreshTimeArgsForCall)]
	fake.updateNextRefreshTimeArgsForCall = append(fake.updateNextRefreshTimeArgsForCall, struct {
		arg1 context.Context
		arg2 *storage.Policy
		arg3 time.Time
	}{arg1, arg2, arg3})
	stub := fake.UpdateNextRefreshTimeStub
	fakeReturns := fake.updateNextRefreshTimeReturns
	fake.recordInvocation("UpdateNextRefreshTime", []interface{}{arg1, arg2, arg3})
	fake.updateNextRefreshTimeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStorage) UpdateNextRefreshTimeCallCount() int {
	fake.updateNextRefreshTimeMutex.RLock()
	defer fake.updateNextRefreshTimeMutex.RUnlock()
	return len(fake.updateNextRefreshTimeArgsForCall)
}

func (fake *FakeStorage) UpdateNextRefreshTimeCalls(stub func(context.Context, *storage.Policy, time.Time) error) {
	fake.updateNextRefreshTimeMutex.Lock()
	defer fake.updateNextRefreshTimeMutex.Unlock()
	fake.UpdateNextRefreshTimeStub = stub
}

func (fake *FakeStorage) UpdateNextRefreshTimeArgsForCall(i int) (context.Context, *storage.Policy, time.Time) {
	fake.updateNextRefreshTimeMutex.RLock()
	defer fake.updateNextRefreshTimeMutex.RUnlock()
	argsForCall := fake.updateNextRefreshTimeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeStorage) UpdateNextRefreshTimeReturns(result1 error) {
	fake.updateNextRefreshTimeMutex.Lock()
	defer fake.updateNextRefreshTimeMutex.Unlock()
	fake.UpdateNextRefreshTimeStub = nil
	fake.updateNextRefreshTimeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) UpdateNextRefreshTimeReturnsOnCall(i int, result1 error) {
	fake.updateNextRefreshTimeMutex.Lock()
	defer fake.updateNextRefreshTimeMutex.Unlock()
	fake.UpdateNextRefreshTimeStub = nil
	if fake.updateNextRefreshTimeReturnsOnCall == nil {
		fake.updateNextRefreshTimeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateNextRefreshTimeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRefreshPoliciesMutex.RLock()
	defer fake.getRefreshPoliciesMutex.RUnlock()
	fake.postponeRefreshMutex.RLock()
	defer fake.postponeRefreshMutex.RUnlock()
	fake.updateNextRefreshTimeMutex.RLock()
	defer fake.updateNextRefreshTimeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStorage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ policydata.Storage = new(FakeStorage)
