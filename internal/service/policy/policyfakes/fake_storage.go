// Code generated by counterfeiter. DO NOT EDIT.
package policyfakes

import (
	"context"
	"sync"

	"gitlab.eclipse.org/eclipse/xfsc/tsa/policy/internal/service/policy"
	"gitlab.eclipse.org/eclipse/xfsc/tsa/policy/internal/storage"
)

type FakeStorage struct {
	GetPoliciesStub        func(context.Context, *bool) ([]*storage.Policy, error)
	getPoliciesMutex       sync.RWMutex
	getPoliciesArgsForCall []struct {
		arg1 context.Context
		arg2 *bool
	}
	getPoliciesReturns struct {
		result1 []*storage.Policy
		result2 error
	}
	getPoliciesReturnsOnCall map[int]struct {
		result1 []*storage.Policy
		result2 error
	}
	PolicyStub        func(context.Context, string, string, string) (*storage.Policy, error)
	policyMutex       sync.RWMutex
	policyArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	policyReturns struct {
		result1 *storage.Policy
		result2 error
	}
	policyReturnsOnCall map[int]struct {
		result1 *storage.Policy
		result2 error
	}
	SetPolicyLockStub        func(context.Context, string, string, string, bool) error
	setPolicyLockMutex       sync.RWMutex
	setPolicyLockArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 bool
	}
	setPolicyLockReturns struct {
		result1 error
	}
	setPolicyLockReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStorage) GetPolicies(arg1 context.Context, arg2 *bool) ([]*storage.Policy, error) {
	fake.getPoliciesMutex.Lock()
	ret, specificReturn := fake.getPoliciesReturnsOnCall[len(fake.getPoliciesArgsForCall)]
	fake.getPoliciesArgsForCall = append(fake.getPoliciesArgsForCall, struct {
		arg1 context.Context
		arg2 *bool
	}{arg1, arg2})
	stub := fake.GetPoliciesStub
	fakeReturns := fake.getPoliciesReturns
	fake.recordInvocation("GetPolicies", []interface{}{arg1, arg2})
	fake.getPoliciesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStorage) GetPoliciesCallCount() int {
	fake.getPoliciesMutex.RLock()
	defer fake.getPoliciesMutex.RUnlock()
	return len(fake.getPoliciesArgsForCall)
}

func (fake *FakeStorage) GetPoliciesCalls(stub func(context.Context, *bool) ([]*storage.Policy, error)) {
	fake.getPoliciesMutex.Lock()
	defer fake.getPoliciesMutex.Unlock()
	fake.GetPoliciesStub = stub
}

func (fake *FakeStorage) GetPoliciesArgsForCall(i int) (context.Context, *bool) {
	fake.getPoliciesMutex.RLock()
	defer fake.getPoliciesMutex.RUnlock()
	argsForCall := fake.getPoliciesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStorage) GetPoliciesReturns(result1 []*storage.Policy, result2 error) {
	fake.getPoliciesMutex.Lock()
	defer fake.getPoliciesMutex.Unlock()
	fake.GetPoliciesStub = nil
	fake.getPoliciesReturns = struct {
		result1 []*storage.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) GetPoliciesReturnsOnCall(i int, result1 []*storage.Policy, result2 error) {
	fake.getPoliciesMutex.Lock()
	defer fake.getPoliciesMutex.Unlock()
	fake.GetPoliciesStub = nil
	if fake.getPoliciesReturnsOnCall == nil {
		fake.getPoliciesReturnsOnCall = make(map[int]struct {
			result1 []*storage.Policy
			result2 error
		})
	}
	fake.getPoliciesReturnsOnCall[i] = struct {
		result1 []*storage.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) Policy(arg1 context.Context, arg2 string, arg3 string, arg4 string) (*storage.Policy, error) {
	fake.policyMutex.Lock()
	ret, specificReturn := fake.policyReturnsOnCall[len(fake.policyArgsForCall)]
	fake.policyArgsForCall = append(fake.policyArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.PolicyStub
	fakeReturns := fake.policyReturns
	fake.recordInvocation("Policy", []interface{}{arg1, arg2, arg3, arg4})
	fake.policyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStorage) PolicyCallCount() int {
	fake.policyMutex.RLock()
	defer fake.policyMutex.RUnlock()
	return len(fake.policyArgsForCall)
}

func (fake *FakeStorage) PolicyCalls(stub func(context.Context, string, string, string) (*storage.Policy, error)) {
	fake.policyMutex.Lock()
	defer fake.policyMutex.Unlock()
	fake.PolicyStub = stub
}

func (fake *FakeStorage) PolicyArgsForCall(i int) (context.Context, string, string, string) {
	fake.policyMutex.RLock()
	defer fake.policyMutex.RUnlock()
	argsForCall := fake.policyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeStorage) PolicyReturns(result1 *storage.Policy, result2 error) {
	fake.policyMutex.Lock()
	defer fake.policyMutex.Unlock()
	fake.PolicyStub = nil
	fake.policyReturns = struct {
		result1 *storage.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) PolicyReturnsOnCall(i int, result1 *storage.Policy, result2 error) {
	fake.policyMutex.Lock()
	defer fake.policyMutex.Unlock()
	fake.PolicyStub = nil
	if fake.policyReturnsOnCall == nil {
		fake.policyReturnsOnCall = make(map[int]struct {
			result1 *storage.Policy
			result2 error
		})
	}
	fake.policyReturnsOnCall[i] = struct {
		result1 *storage.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) SetPolicyLock(arg1 context.Context, arg2 string, arg3 string, arg4 string, arg5 bool) error {
	fake.setPolicyLockMutex.Lock()
	ret, specificReturn := fake.setPolicyLockReturnsOnCall[len(fake.setPolicyLockArgsForCall)]
	fake.setPolicyLockArgsForCall = append(fake.setPolicyLockArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 bool
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.SetPolicyLockStub
	fakeReturns := fake.setPolicyLockReturns
	fake.recordInvocation("SetPolicyLock", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.setPolicyLockMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStorage) SetPolicyLockCallCount() int {
	fake.setPolicyLockMutex.RLock()
	defer fake.setPolicyLockMutex.RUnlock()
	return len(fake.setPolicyLockArgsForCall)
}

func (fake *FakeStorage) SetPolicyLockCalls(stub func(context.Context, string, string, string, bool) error) {
	fake.setPolicyLockMutex.Lock()
	defer fake.setPolicyLockMutex.Unlock()
	fake.SetPolicyLockStub = stub
}

func (fake *FakeStorage) SetPolicyLockArgsForCall(i int) (context.Context, string, string, string, bool) {
	fake.setPolicyLockMutex.RLock()
	defer fake.setPolicyLockMutex.RUnlock()
	argsForCall := fake.setPolicyLockArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeStorage) SetPolicyLockReturns(result1 error) {
	fake.setPolicyLockMutex.Lock()
	defer fake.setPolicyLockMutex.Unlock()
	fake.SetPolicyLockStub = nil
	fake.setPolicyLockReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) SetPolicyLockReturnsOnCall(i int, result1 error) {
	fake.setPolicyLockMutex.Lock()
	defer fake.setPolicyLockMutex.Unlock()
	fake.SetPolicyLockStub = nil
	if fake.setPolicyLockReturnsOnCall == nil {
		fake.setPolicyLockReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setPolicyLockReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getPoliciesMutex.RLock()
	defer fake.getPoliciesMutex.RUnlock()
	fake.policyMutex.RLock()
	defer fake.policyMutex.RUnlock()
	fake.setPolicyLockMutex.RLock()
	defer fake.setPolicyLockMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStorage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ policy.Storage = new(FakeStorage)
