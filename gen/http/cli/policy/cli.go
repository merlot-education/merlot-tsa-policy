// Code generated by goa v3.14.0, DO NOT EDIT.
//
// policy HTTP client CLI support package
//
// Command:
// $ goa gen gitlab.eclipse.org/eclipse/xfsc/tsa/policy/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	healthc "gitlab.eclipse.org/eclipse/xfsc/tsa/policy/gen/http/health/client"
	policyc "gitlab.eclipse.org/eclipse/xfsc/tsa/policy/gen/http/policy/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `policy (evaluate|validate|lock|unlock|export-bundle|list-policies|subscribe-for-policy-change)
health (liveness|readiness)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` policy evaluate --body "Fugiat id praesentium." --repository "policies" --group "example" --policy-name "example" --version "1.0" --evaluation-id "In quis nesciunt autem et." --ttl 1266330156392332621` + "\n" +
		os.Args[0] + ` health liveness` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		policyFlags = flag.NewFlagSet("policy", flag.ContinueOnError)

		policyEvaluateFlags            = flag.NewFlagSet("evaluate", flag.ExitOnError)
		policyEvaluateBodyFlag         = policyEvaluateFlags.String("body", "REQUIRED", "")
		policyEvaluateRepositoryFlag   = policyEvaluateFlags.String("repository", "REQUIRED", "Policy repository.")
		policyEvaluateGroupFlag        = policyEvaluateFlags.String("group", "REQUIRED", "Policy group.")
		policyEvaluatePolicyNameFlag   = policyEvaluateFlags.String("policy-name", "REQUIRED", "Policy name.")
		policyEvaluateVersionFlag      = policyEvaluateFlags.String("version", "REQUIRED", "Policy version.")
		policyEvaluateEvaluationIDFlag = policyEvaluateFlags.String("evaluation-id", "", "")
		policyEvaluateTTLFlag          = policyEvaluateFlags.String("ttl", "", "")

		policyValidateFlags            = flag.NewFlagSet("validate", flag.ExitOnError)
		policyValidateBodyFlag         = policyValidateFlags.String("body", "REQUIRED", "")
		policyValidateRepositoryFlag   = policyValidateFlags.String("repository", "REQUIRED", "Policy repository.")
		policyValidateGroupFlag        = policyValidateFlags.String("group", "REQUIRED", "Policy group.")
		policyValidatePolicyNameFlag   = policyValidateFlags.String("policy-name", "REQUIRED", "Policy name.")
		policyValidateVersionFlag      = policyValidateFlags.String("version", "REQUIRED", "Policy version.")
		policyValidateEvaluationIDFlag = policyValidateFlags.String("evaluation-id", "", "")
		policyValidateTTLFlag          = policyValidateFlags.String("ttl", "", "")

		policyLockFlags          = flag.NewFlagSet("lock", flag.ExitOnError)
		policyLockRepositoryFlag = policyLockFlags.String("repository", "REQUIRED", "Policy repository.")
		policyLockGroupFlag      = policyLockFlags.String("group", "REQUIRED", "Policy group.")
		policyLockPolicyNameFlag = policyLockFlags.String("policy-name", "REQUIRED", "Policy name.")
		policyLockVersionFlag    = policyLockFlags.String("version", "REQUIRED", "Policy version.")

		policyUnlockFlags          = flag.NewFlagSet("unlock", flag.ExitOnError)
		policyUnlockRepositoryFlag = policyUnlockFlags.String("repository", "REQUIRED", "Policy repository.")
		policyUnlockGroupFlag      = policyUnlockFlags.String("group", "REQUIRED", "Policy group.")
		policyUnlockPolicyNameFlag = policyUnlockFlags.String("policy-name", "REQUIRED", "Policy name.")
		policyUnlockVersionFlag    = policyUnlockFlags.String("version", "REQUIRED", "Policy version.")

		policyExportBundleFlags          = flag.NewFlagSet("export-bundle", flag.ExitOnError)
		policyExportBundleRepositoryFlag = policyExportBundleFlags.String("repository", "REQUIRED", "Policy repository.")
		policyExportBundleGroupFlag      = policyExportBundleFlags.String("group", "REQUIRED", "Policy group.")
		policyExportBundlePolicyNameFlag = policyExportBundleFlags.String("policy-name", "REQUIRED", "Policy name.")
		policyExportBundleVersionFlag    = policyExportBundleFlags.String("version", "REQUIRED", "Policy version.")

		policyListPoliciesFlags          = flag.NewFlagSet("list-policies", flag.ExitOnError)
		policyListPoliciesLockedFlag     = policyListPoliciesFlags.String("locked", "", "")
		policyListPoliciesRegoFlag       = policyListPoliciesFlags.String("rego", "", "")
		policyListPoliciesDataFlag       = policyListPoliciesFlags.String("data", "", "")
		policyListPoliciesDataConfigFlag = policyListPoliciesFlags.String("data-config", "", "")

		policySubscribeForPolicyChangeFlags          = flag.NewFlagSet("subscribe-for-policy-change", flag.ExitOnError)
		policySubscribeForPolicyChangeBodyFlag       = policySubscribeForPolicyChangeFlags.String("body", "REQUIRED", "")
		policySubscribeForPolicyChangeRepositoryFlag = policySubscribeForPolicyChangeFlags.String("repository", "REQUIRED", "Policy repository.")
		policySubscribeForPolicyChangeGroupFlag      = policySubscribeForPolicyChangeFlags.String("group", "REQUIRED", "Policy group.")
		policySubscribeForPolicyChangePolicyNameFlag = policySubscribeForPolicyChangeFlags.String("policy-name", "REQUIRED", "Policy name.")
		policySubscribeForPolicyChangeVersionFlag    = policySubscribeForPolicyChangeFlags.String("version", "REQUIRED", "Policy version.")

		healthFlags = flag.NewFlagSet("health", flag.ContinueOnError)

		healthLivenessFlags = flag.NewFlagSet("liveness", flag.ExitOnError)

		healthReadinessFlags = flag.NewFlagSet("readiness", flag.ExitOnError)
	)
	policyFlags.Usage = policyUsage
	policyEvaluateFlags.Usage = policyEvaluateUsage
	policyValidateFlags.Usage = policyValidateUsage
	policyLockFlags.Usage = policyLockUsage
	policyUnlockFlags.Usage = policyUnlockUsage
	policyExportBundleFlags.Usage = policyExportBundleUsage
	policyListPoliciesFlags.Usage = policyListPoliciesUsage
	policySubscribeForPolicyChangeFlags.Usage = policySubscribeForPolicyChangeUsage

	healthFlags.Usage = healthUsage
	healthLivenessFlags.Usage = healthLivenessUsage
	healthReadinessFlags.Usage = healthReadinessUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "policy":
			svcf = policyFlags
		case "health":
			svcf = healthFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "policy":
			switch epn {
			case "evaluate":
				epf = policyEvaluateFlags

			case "validate":
				epf = policyValidateFlags

			case "lock":
				epf = policyLockFlags

			case "unlock":
				epf = policyUnlockFlags

			case "export-bundle":
				epf = policyExportBundleFlags

			case "list-policies":
				epf = policyListPoliciesFlags

			case "subscribe-for-policy-change":
				epf = policySubscribeForPolicyChangeFlags

			}

		case "health":
			switch epn {
			case "liveness":
				epf = healthLivenessFlags

			case "readiness":
				epf = healthReadinessFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "policy":
			c := policyc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "evaluate":
				endpoint = c.Evaluate()
				data, err = policyc.BuildEvaluatePayload(*policyEvaluateBodyFlag, *policyEvaluateRepositoryFlag, *policyEvaluateGroupFlag, *policyEvaluatePolicyNameFlag, *policyEvaluateVersionFlag, *policyEvaluateEvaluationIDFlag, *policyEvaluateTTLFlag)
			case "validate":
				endpoint = c.Validate()
				data, err = policyc.BuildValidatePayload(*policyValidateBodyFlag, *policyValidateRepositoryFlag, *policyValidateGroupFlag, *policyValidatePolicyNameFlag, *policyValidateVersionFlag, *policyValidateEvaluationIDFlag, *policyValidateTTLFlag)
			case "lock":
				endpoint = c.Lock()
				data, err = policyc.BuildLockPayload(*policyLockRepositoryFlag, *policyLockGroupFlag, *policyLockPolicyNameFlag, *policyLockVersionFlag)
			case "unlock":
				endpoint = c.Unlock()
				data, err = policyc.BuildUnlockPayload(*policyUnlockRepositoryFlag, *policyUnlockGroupFlag, *policyUnlockPolicyNameFlag, *policyUnlockVersionFlag)
			case "export-bundle":
				endpoint = c.ExportBundle()
				data, err = policyc.BuildExportBundlePayload(*policyExportBundleRepositoryFlag, *policyExportBundleGroupFlag, *policyExportBundlePolicyNameFlag, *policyExportBundleVersionFlag)
			case "list-policies":
				endpoint = c.ListPolicies()
				data, err = policyc.BuildListPoliciesPayload(*policyListPoliciesLockedFlag, *policyListPoliciesRegoFlag, *policyListPoliciesDataFlag, *policyListPoliciesDataConfigFlag)
			case "subscribe-for-policy-change":
				endpoint = c.SubscribeForPolicyChange()
				data, err = policyc.BuildSubscribeForPolicyChangePayload(*policySubscribeForPolicyChangeBodyFlag, *policySubscribeForPolicyChangeRepositoryFlag, *policySubscribeForPolicyChangeGroupFlag, *policySubscribeForPolicyChangePolicyNameFlag, *policySubscribeForPolicyChangeVersionFlag)
			}
		case "health":
			c := healthc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "liveness":
				endpoint = c.Liveness()
				data = nil
			case "readiness":
				endpoint = c.Readiness()
				data = nil
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// policyUsage displays the usage of the policy command and its subcommands.
func policyUsage() {
	fmt.Fprintf(os.Stderr, `Policy Service provides evaluation of policies through Open Policy Agent.
Usage:
    %[1]s [globalflags] policy COMMAND [flags]

COMMAND:
    evaluate: Evaluate executes a policy with the given 'data' as input.
    validate: Validate executes a policy with the given 'data' as input and validates the output schema.
    lock: Lock a policy so that it cannot be evaluated.
    unlock: Unlock a policy so it can be evaluated again.
    export-bundle: Export a signed policy bundle.
    list-policies: List policies from storage with optional filters.
    subscribe-for-policy-change: Subscribe for policy change notifications by registering webhook callbacks which the policy service will call.

Additional help:
    %[1]s policy COMMAND --help
`, os.Args[0])
}
func policyEvaluateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] policy evaluate -body JSON -repository STRING -group STRING -policy-name STRING -version STRING -evaluation-id STRING -ttl INT

Evaluate executes a policy with the given 'data' as input.
    -body JSON: 
    -repository STRING: Policy repository.
    -group STRING: Policy group.
    -policy-name STRING: Policy name.
    -version STRING: Policy version.
    -evaluation-id STRING: 
    -ttl INT: 

Example:
    %[1]s policy evaluate --body "Fugiat id praesentium." --repository "policies" --group "example" --policy-name "example" --version "1.0" --evaluation-id "In quis nesciunt autem et." --ttl 1266330156392332621
`, os.Args[0])
}

func policyValidateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] policy validate -body JSON -repository STRING -group STRING -policy-name STRING -version STRING -evaluation-id STRING -ttl INT

Validate executes a policy with the given 'data' as input and validates the output schema.
    -body JSON: 
    -repository STRING: Policy repository.
    -group STRING: Policy group.
    -policy-name STRING: Policy name.
    -version STRING: Policy version.
    -evaluation-id STRING: 
    -ttl INT: 

Example:
    %[1]s policy validate --body "Ad quam dolores architecto itaque voluptatum." --repository "policies" --group "example" --policy-name "example" --version "1.0" --evaluation-id "Accusamus enim." --ttl 5827157130043234078
`, os.Args[0])
}

func policyLockUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] policy lock -repository STRING -group STRING -policy-name STRING -version STRING

Lock a policy so that it cannot be evaluated.
    -repository STRING: Policy repository.
    -group STRING: Policy group.
    -policy-name STRING: Policy name.
    -version STRING: Policy version.

Example:
    %[1]s policy lock --repository "Voluptate amet." --group "Aut et." --policy-name "Maiores et minus." --version "Veritatis quam qui nostrum eaque."
`, os.Args[0])
}

func policyUnlockUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] policy unlock -repository STRING -group STRING -policy-name STRING -version STRING

Unlock a policy so it can be evaluated again.
    -repository STRING: Policy repository.
    -group STRING: Policy group.
    -policy-name STRING: Policy name.
    -version STRING: Policy version.

Example:
    %[1]s policy unlock --repository "Vel dolores omnis molestiae tempora sed repellendus." --group "Error minus vel voluptate quasi." --policy-name "Debitis consectetur." --version "Vel sunt dolorem ea architecto iure."
`, os.Args[0])
}

func policyExportBundleUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] policy export-bundle -repository STRING -group STRING -policy-name STRING -version STRING

Export a signed policy bundle.
    -repository STRING: Policy repository.
    -group STRING: Policy group.
    -policy-name STRING: Policy name.
    -version STRING: Policy version.

Example:
    %[1]s policy export-bundle --repository "policies" --group "example" --policy-name "returnDID" --version "1.0"
`, os.Args[0])
}

func policyListPoliciesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] policy list-policies -locked BOOL -rego BOOL -data BOOL -data-config BOOL

List policies from storage with optional filters.
    -locked BOOL: 
    -rego BOOL: 
    -data BOOL: 
    -data-config BOOL: 

Example:
    %[1]s policy list-policies --locked true --rego false --data true --data-config false
`, os.Args[0])
}

func policySubscribeForPolicyChangeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] policy subscribe-for-policy-change -body JSON -repository STRING -group STRING -policy-name STRING -version STRING

Subscribe for policy change notifications by registering webhook callbacks which the policy service will call.
    -body JSON: 
    -repository STRING: Policy repository.
    -group STRING: Policy group.
    -policy-name STRING: Policy name.
    -version STRING: Policy version.

Example:
    %[1]s policy subscribe-for-policy-change --body '{
      "subscriber": "cch",
      "webhook_url": "http://cruickshank.biz/waylon"
   }' --repository "Praesentium ut reiciendis fugit." --group "Cupiditate provident laborum dolor dolorem modi." --policy-name "Officiis veritatis." --version "Rerum recusandae eligendi in id quibusdam quia."
`, os.Args[0])
}

// healthUsage displays the usage of the health command and its subcommands.
func healthUsage() {
	fmt.Fprintf(os.Stderr, `Health service provides health check endpoints.
Usage:
    %[1]s [globalflags] health COMMAND [flags]

COMMAND:
    liveness: Liveness implements Liveness.
    readiness: Readiness implements Readiness.

Additional help:
    %[1]s health COMMAND --help
`, os.Args[0])
}
func healthLivenessUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] health liveness

Liveness implements Liveness.

Example:
    %[1]s health liveness
`, os.Args[0])
}

func healthReadinessUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] health readiness

Readiness implements Readiness.

Example:
    %[1]s health readiness
`, os.Args[0])
}
