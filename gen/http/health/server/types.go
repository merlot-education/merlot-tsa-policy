// Code generated by goa v3.14.0, DO NOT EDIT.
//
// health HTTP server types
//
// Command:
// $ goa gen gitlab.eclipse.org/eclipse/xfsc/tsa/policy/design

package server

import (
	health "gitlab.eclipse.org/eclipse/xfsc/tsa/policy/gen/health"
)

// LivenessResponseBody is the type of the "health" service "Liveness" endpoint
// HTTP response body.
type LivenessResponseBody struct {
	// Service name.
	Service string `form:"service" json:"service" xml:"service"`
	// Status message.
	Status string `form:"status" json:"status" xml:"status"`
	// Service runtime version.
	Version string `form:"version" json:"version" xml:"version"`
}

// ReadinessResponseBody is the type of the "health" service "Readiness"
// endpoint HTTP response body.
type ReadinessResponseBody struct {
	// Service name.
	Service string `form:"service" json:"service" xml:"service"`
	// Status message.
	Status string `form:"status" json:"status" xml:"status"`
	// Service runtime version.
	Version string `form:"version" json:"version" xml:"version"`
}

// NewLivenessResponseBody builds the HTTP response body from the result of the
// "Liveness" endpoint of the "health" service.
func NewLivenessResponseBody(res *health.HealthResponse) *LivenessResponseBody {
	body := &LivenessResponseBody{
		Service: res.Service,
		Status:  res.Status,
		Version: res.Version,
	}
	return body
}

// NewReadinessResponseBody builds the HTTP response body from the result of
// the "Readiness" endpoint of the "health" service.
func NewReadinessResponseBody(res *health.HealthResponse) *ReadinessResponseBody {
	body := &ReadinessResponseBody{
		Service: res.Service,
		Status:  res.Status,
		Version: res.Version,
	}
	return body
}
