// Code generated by goa v3.12.3, DO NOT EDIT.
//
// policy HTTP client CLI support package
//
// Command:
// $ goa gen gitlab.eclipse.org/eclipse/xfsc/tsa/policy/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	policy "gitlab.eclipse.org/eclipse/xfsc/tsa/policy/gen/policy"
)

// BuildEvaluatePayload builds the payload for the policy Evaluate endpoint
// from CLI flags.
func BuildEvaluatePayload(policyEvaluateBody string, policyEvaluateRepository string, policyEvaluateGroup string, policyEvaluatePolicyName string, policyEvaluateVersion string, policyEvaluateEvaluationID string, policyEvaluateTTL string) (*policy.EvaluateRequest, error) {
	var err error
	var body any
	{
		err = json.Unmarshal([]byte(policyEvaluateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "\"Quaerat deleniti non nihil.\"")
		}
	}
	var repository string
	{
		repository = policyEvaluateRepository
	}
	var group string
	{
		group = policyEvaluateGroup
	}
	var policyName string
	{
		policyName = policyEvaluatePolicyName
	}
	var version string
	{
		version = policyEvaluateVersion
	}
	var evaluationID *string
	{
		if policyEvaluateEvaluationID != "" {
			evaluationID = &policyEvaluateEvaluationID
		}
	}
	var ttl *int
	{
		if policyEvaluateTTL != "" {
			var v int64
			v, err = strconv.ParseInt(policyEvaluateTTL, 10, strconv.IntSize)
			val := int(v)
			ttl = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for ttl, must be INT")
			}
		}
	}
	v := body
	res := &policy.EvaluateRequest{
		Input: &v,
	}
	res.Repository = repository
	res.Group = group
	res.PolicyName = policyName
	res.Version = version
	res.EvaluationID = evaluationID
	res.TTL = ttl

	return res, nil
}

// BuildLockPayload builds the payload for the policy Lock endpoint from CLI
// flags.
func BuildLockPayload(policyLockRepository string, policyLockGroup string, policyLockPolicyName string, policyLockVersion string) (*policy.LockRequest, error) {
	var repository string
	{
		repository = policyLockRepository
	}
	var group string
	{
		group = policyLockGroup
	}
	var policyName string
	{
		policyName = policyLockPolicyName
	}
	var version string
	{
		version = policyLockVersion
	}
	v := &policy.LockRequest{}
	v.Repository = repository
	v.Group = group
	v.PolicyName = policyName
	v.Version = version

	return v, nil
}

// BuildUnlockPayload builds the payload for the policy Unlock endpoint from
// CLI flags.
func BuildUnlockPayload(policyUnlockRepository string, policyUnlockGroup string, policyUnlockPolicyName string, policyUnlockVersion string) (*policy.UnlockRequest, error) {
	var repository string
	{
		repository = policyUnlockRepository
	}
	var group string
	{
		group = policyUnlockGroup
	}
	var policyName string
	{
		policyName = policyUnlockPolicyName
	}
	var version string
	{
		version = policyUnlockVersion
	}
	v := &policy.UnlockRequest{}
	v.Repository = repository
	v.Group = group
	v.PolicyName = policyName
	v.Version = version

	return v, nil
}

// BuildListPoliciesPayload builds the payload for the policy ListPolicies
// endpoint from CLI flags.
func BuildListPoliciesPayload(policyListPoliciesLocked string, policyListPoliciesRego string, policyListPoliciesData string, policyListPoliciesDataConfig string) (*policy.PoliciesRequest, error) {
	var err error
	var locked *bool
	{
		if policyListPoliciesLocked != "" {
			var val bool
			val, err = strconv.ParseBool(policyListPoliciesLocked)
			locked = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for locked, must be BOOL")
			}
		}
	}
	var rego *bool
	{
		if policyListPoliciesRego != "" {
			var val bool
			val, err = strconv.ParseBool(policyListPoliciesRego)
			rego = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for rego, must be BOOL")
			}
		}
	}
	var data *bool
	{
		if policyListPoliciesData != "" {
			var val bool
			val, err = strconv.ParseBool(policyListPoliciesData)
			data = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for data, must be BOOL")
			}
		}
	}
	var dataConfig *bool
	{
		if policyListPoliciesDataConfig != "" {
			var val bool
			val, err = strconv.ParseBool(policyListPoliciesDataConfig)
			dataConfig = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for dataConfig, must be BOOL")
			}
		}
	}
	v := &policy.PoliciesRequest{}
	v.Locked = locked
	v.Rego = rego
	v.Data = data
	v.DataConfig = dataConfig

	return v, nil
}
