// Code generated by goa v3.14.0, DO NOT EDIT.
//
// policy HTTP client CLI support package
//
// Command:
// $ goa gen gitlab.eclipse.org/eclipse/xfsc/tsa/policy/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"
	"unicode/utf8"

	policy "gitlab.eclipse.org/eclipse/xfsc/tsa/policy/gen/policy"
	goa "goa.design/goa/v3/pkg"
)

// BuildEvaluatePayload builds the payload for the policy Evaluate endpoint
// from CLI flags.
func BuildEvaluatePayload(policyEvaluateBody string, policyEvaluateRepository string, policyEvaluateGroup string, policyEvaluatePolicyName string, policyEvaluateVersion string, policyEvaluateEvaluationID string, policyEvaluateTTL string) (*policy.EvaluateRequest, error) {
	var err error
	var body any
	{
		err = json.Unmarshal([]byte(policyEvaluateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "\"Ipsa ad voluptatum maxime ut.\"")
		}
	}
	var repository string
	{
		repository = policyEvaluateRepository
	}
	var group string
	{
		group = policyEvaluateGroup
	}
	var policyName string
	{
		policyName = policyEvaluatePolicyName
	}
	var version string
	{
		version = policyEvaluateVersion
	}
	var evaluationID *string
	{
		if policyEvaluateEvaluationID != "" {
			evaluationID = &policyEvaluateEvaluationID
		}
	}
	var ttl *int
	{
		if policyEvaluateTTL != "" {
			var v int64
			v, err = strconv.ParseInt(policyEvaluateTTL, 10, strconv.IntSize)
			val := int(v)
			ttl = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for ttl, must be INT")
			}
		}
	}
	v := body
	res := &policy.EvaluateRequest{
		Input: &v,
	}
	res.Repository = repository
	res.Group = group
	res.PolicyName = policyName
	res.Version = version
	res.EvaluationID = evaluationID
	res.TTL = ttl

	return res, nil
}

// BuildValidatePayload builds the payload for the policy Validate endpoint
// from CLI flags.
func BuildValidatePayload(policyValidateBody string, policyValidateRepository string, policyValidateGroup string, policyValidatePolicyName string, policyValidateVersion string, policyValidateEvaluationID string, policyValidateTTL string) (*policy.EvaluateRequest, error) {
	var err error
	var body any
	{
		err = json.Unmarshal([]byte(policyValidateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "\"At ut dolore.\"")
		}
	}
	var repository string
	{
		repository = policyValidateRepository
	}
	var group string
	{
		group = policyValidateGroup
	}
	var policyName string
	{
		policyName = policyValidatePolicyName
	}
	var version string
	{
		version = policyValidateVersion
	}
	var evaluationID *string
	{
		if policyValidateEvaluationID != "" {
			evaluationID = &policyValidateEvaluationID
		}
	}
	var ttl *int
	{
		if policyValidateTTL != "" {
			var v int64
			v, err = strconv.ParseInt(policyValidateTTL, 10, strconv.IntSize)
			val := int(v)
			ttl = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for ttl, must be INT")
			}
		}
	}
	v := body
	res := &policy.EvaluateRequest{
		Input: &v,
	}
	res.Repository = repository
	res.Group = group
	res.PolicyName = policyName
	res.Version = version
	res.EvaluationID = evaluationID
	res.TTL = ttl

	return res, nil
}

// BuildLockPayload builds the payload for the policy Lock endpoint from CLI
// flags.
func BuildLockPayload(policyLockRepository string, policyLockGroup string, policyLockPolicyName string, policyLockVersion string) (*policy.LockRequest, error) {
	var repository string
	{
		repository = policyLockRepository
	}
	var group string
	{
		group = policyLockGroup
	}
	var policyName string
	{
		policyName = policyLockPolicyName
	}
	var version string
	{
		version = policyLockVersion
	}
	v := &policy.LockRequest{}
	v.Repository = repository
	v.Group = group
	v.PolicyName = policyName
	v.Version = version

	return v, nil
}

// BuildUnlockPayload builds the payload for the policy Unlock endpoint from
// CLI flags.
func BuildUnlockPayload(policyUnlockRepository string, policyUnlockGroup string, policyUnlockPolicyName string, policyUnlockVersion string) (*policy.UnlockRequest, error) {
	var repository string
	{
		repository = policyUnlockRepository
	}
	var group string
	{
		group = policyUnlockGroup
	}
	var policyName string
	{
		policyName = policyUnlockPolicyName
	}
	var version string
	{
		version = policyUnlockVersion
	}
	v := &policy.UnlockRequest{}
	v.Repository = repository
	v.Group = group
	v.PolicyName = policyName
	v.Version = version

	return v, nil
}

// BuildExportBundlePayload builds the payload for the policy ExportBundle
// endpoint from CLI flags.
func BuildExportBundlePayload(policyExportBundleRepository string, policyExportBundleGroup string, policyExportBundlePolicyName string, policyExportBundleVersion string) (*policy.ExportBundleRequest, error) {
	var repository string
	{
		repository = policyExportBundleRepository
	}
	var group string
	{
		group = policyExportBundleGroup
	}
	var policyName string
	{
		policyName = policyExportBundlePolicyName
	}
	var version string
	{
		version = policyExportBundleVersion
	}
	v := &policy.ExportBundleRequest{}
	v.Repository = repository
	v.Group = group
	v.PolicyName = policyName
	v.Version = version

	return v, nil
}

// BuildPolicyPublicKeyPayload builds the payload for the policy
// PolicyPublicKey endpoint from CLI flags.
func BuildPolicyPublicKeyPayload(policyPolicyPublicKeyRepository string, policyPolicyPublicKeyGroup string, policyPolicyPublicKeyPolicyName string, policyPolicyPublicKeyVersion string) (*policy.PolicyPublicKeyRequest, error) {
	var repository string
	{
		repository = policyPolicyPublicKeyRepository
	}
	var group string
	{
		group = policyPolicyPublicKeyGroup
	}
	var policyName string
	{
		policyName = policyPolicyPublicKeyPolicyName
	}
	var version string
	{
		version = policyPolicyPublicKeyVersion
	}
	v := &policy.PolicyPublicKeyRequest{}
	v.Repository = repository
	v.Group = group
	v.PolicyName = policyName
	v.Version = version

	return v, nil
}

// BuildImportBundlePayload builds the payload for the policy ImportBundle
// endpoint from CLI flags.
func BuildImportBundlePayload(policyImportBundleLength string) (*policy.ImportBundlePayload, error) {
	var err error
	var length *int
	{
		if policyImportBundleLength != "" {
			var v int64
			v, err = strconv.ParseInt(policyImportBundleLength, 10, strconv.IntSize)
			val := int(v)
			length = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for length, must be INT")
			}
		}
	}
	v := &policy.ImportBundlePayload{}
	v.Length = length

	return v, nil
}

// BuildListPoliciesPayload builds the payload for the policy ListPolicies
// endpoint from CLI flags.
func BuildListPoliciesPayload(policyListPoliciesLocked string, policyListPoliciesPolicyName string, policyListPoliciesRego string, policyListPoliciesData string, policyListPoliciesDataConfig string) (*policy.PoliciesRequest, error) {
	var err error
	var locked *bool
	{
		if policyListPoliciesLocked != "" {
			var val bool
			val, err = strconv.ParseBool(policyListPoliciesLocked)
			locked = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for locked, must be BOOL")
			}
		}
	}
	var policyName *string
	{
		if policyListPoliciesPolicyName != "" {
			policyName = &policyListPoliciesPolicyName
		}
	}
	var rego *bool
	{
		if policyListPoliciesRego != "" {
			var val bool
			val, err = strconv.ParseBool(policyListPoliciesRego)
			rego = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for rego, must be BOOL")
			}
		}
	}
	var data *bool
	{
		if policyListPoliciesData != "" {
			var val bool
			val, err = strconv.ParseBool(policyListPoliciesData)
			data = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for data, must be BOOL")
			}
		}
	}
	var dataConfig *bool
	{
		if policyListPoliciesDataConfig != "" {
			var val bool
			val, err = strconv.ParseBool(policyListPoliciesDataConfig)
			dataConfig = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for dataConfig, must be BOOL")
			}
		}
	}
	v := &policy.PoliciesRequest{}
	v.Locked = locked
	v.PolicyName = policyName
	v.Rego = rego
	v.Data = data
	v.DataConfig = dataConfig

	return v, nil
}

// BuildSetPolicyAutoImportPayload builds the payload for the policy
// SetPolicyAutoImport endpoint from CLI flags.
func BuildSetPolicyAutoImportPayload(policySetPolicyAutoImportBody string) (*policy.SetPolicyAutoImportRequest, error) {
	var err error
	var body SetPolicyAutoImportRequestBody
	{
		err = json.Unmarshal([]byte(policySetPolicyAutoImportBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"interval\": \"1h30m\",\n      \"policyURL\": \"http://altenwerthstrosin.info/ressie\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.policyURL", body.PolicyURL, goa.FormatURI))
		if utf8.RuneCountInString(body.Interval) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.interval", body.Interval, utf8.RuneCountInString(body.Interval), 2, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &policy.SetPolicyAutoImportRequest{
		PolicyURL: body.PolicyURL,
		Interval:  body.Interval,
	}

	return v, nil
}

// BuildDeletePolicyAutoImportPayload builds the payload for the policy
// DeletePolicyAutoImport endpoint from CLI flags.
func BuildDeletePolicyAutoImportPayload(policyDeletePolicyAutoImportBody string) (*policy.DeletePolicyAutoImportRequest, error) {
	var err error
	var body DeletePolicyAutoImportRequestBody
	{
		err = json.Unmarshal([]byte(policyDeletePolicyAutoImportBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"policyURL\": \"http://harvey.info/mossie_wilkinson\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.policyURL", body.PolicyURL, goa.FormatURI))
		if err != nil {
			return nil, err
		}
	}
	v := &policy.DeletePolicyAutoImportRequest{
		PolicyURL: body.PolicyURL,
	}

	return v, nil
}

// BuildSubscribeForPolicyChangePayload builds the payload for the policy
// SubscribeForPolicyChange endpoint from CLI flags.
func BuildSubscribeForPolicyChangePayload(policySubscribeForPolicyChangeBody string, policySubscribeForPolicyChangeRepository string, policySubscribeForPolicyChangeGroup string, policySubscribeForPolicyChangePolicyName string, policySubscribeForPolicyChangeVersion string) (*policy.SubscribeRequest, error) {
	var err error
	var body SubscribeForPolicyChangeRequestBody
	{
		err = json.Unmarshal([]byte(policySubscribeForPolicyChangeBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"subscriber\": \"bsm\",\n      \"webhook_url\": \"http://yundt.org/bart\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.webhook_url", body.WebhookURL, goa.FormatURI))
		if utf8.RuneCountInString(body.Subscriber) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.subscriber", body.Subscriber, utf8.RuneCountInString(body.Subscriber), 3, true))
		}
		if utf8.RuneCountInString(body.Subscriber) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.subscriber", body.Subscriber, utf8.RuneCountInString(body.Subscriber), 100, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var repository string
	{
		repository = policySubscribeForPolicyChangeRepository
	}
	var group string
	{
		group = policySubscribeForPolicyChangeGroup
	}
	var policyName string
	{
		policyName = policySubscribeForPolicyChangePolicyName
	}
	var version string
	{
		version = policySubscribeForPolicyChangeVersion
	}
	v := &policy.SubscribeRequest{
		WebhookURL: body.WebhookURL,
		Subscriber: body.Subscriber,
	}
	v.Repository = repository
	v.Group = group
	v.PolicyName = policyName
	v.Version = version

	return v, nil
}
