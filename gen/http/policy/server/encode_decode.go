// Code generated by goa v3.7.0, DO NOT EDIT.
//
// policy HTTP server encoders and decoders
//
// Command:
// $ goa gen code.vereign.com/gaiax/tsa/policy/design

package server

import (
	"context"
	"io"
	"net/http"

	policy "code.vereign.com/gaiax/tsa/policy/gen/policy"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeEvaluateResponse returns an encoder for responses returned by the
// policy Evaluate endpoint.
func EncodeEvaluateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*policy.EvaluateResult)
		enc := encoder(ctx, w)
		body := res.Result
		w.Header().Set("Etag", res.ETag)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeEvaluateRequest returns a decoder for requests sent to the policy
// Evaluate endpoint.
func DecodeEvaluateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body interface{}
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				err = nil
			} else {
				return nil, goa.DecodePayloadError(err.Error())
			}
		}

		var (
			group        string
			policyName   string
			version      string
			evaluationID *string

			params = mux.Vars(r)
		)
		group = params["group"]
		policyName = params["policyName"]
		version = params["version"]
		evaluationIDRaw := r.Header.Get("x-evaluation-id")
		if evaluationIDRaw != "" {
			evaluationID = &evaluationIDRaw
		}
		payload := NewEvaluateRequest(body, group, policyName, version, evaluationID)

		return payload, nil
	}
}

// EncodeLockResponse returns an encoder for responses returned by the policy
// Lock endpoint.
func EncodeLockResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeLockRequest returns a decoder for requests sent to the policy Lock
// endpoint.
func DecodeLockRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			group      string
			policyName string
			version    string

			params = mux.Vars(r)
		)
		group = params["group"]
		policyName = params["policyName"]
		version = params["version"]
		payload := NewLockRequest(group, policyName, version)

		return payload, nil
	}
}

// EncodeUnlockResponse returns an encoder for responses returned by the policy
// Unlock endpoint.
func EncodeUnlockResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeUnlockRequest returns a decoder for requests sent to the policy Unlock
// endpoint.
func DecodeUnlockRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			group      string
			policyName string
			version    string

			params = mux.Vars(r)
		)
		group = params["group"]
		policyName = params["policyName"]
		version = params["version"]
		payload := NewUnlockRequest(group, policyName, version)

		return payload, nil
	}
}
