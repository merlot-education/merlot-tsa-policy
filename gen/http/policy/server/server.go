// Code generated by goa v3.7.0, DO NOT EDIT.
//
// policy HTTP server
//
// Command:
// $ goa gen code.vereign.com/gaiax/tsa/policy/design

package server

import (
	"context"
	"net/http"

	policy "code.vereign.com/gaiax/tsa/policy/gen/policy"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the policy service endpoint HTTP handlers.
type Server struct {
	Mounts   []*MountPoint
	Evaluate http.Handler
	Lock     http.Handler
	Unlock   http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the policy service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *policy.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"Evaluate", "GET", "/policy/{group}/{policyName}/{version}/evaluation"},
			{"Evaluate", "POST", "/policy/{group}/{policyName}/{version}/evaluation"},
			{"Lock", "POST", "/policy/{group}/{policyName}/{version}/lock"},
			{"Unlock", "DELETE", "/policy/{group}/{policyName}/{version}/lock"},
		},
		Evaluate: NewEvaluateHandler(e.Evaluate, mux, decoder, encoder, errhandler, formatter),
		Lock:     NewLockHandler(e.Lock, mux, decoder, encoder, errhandler, formatter),
		Unlock:   NewUnlockHandler(e.Unlock, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "policy" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Evaluate = m(s.Evaluate)
	s.Lock = m(s.Lock)
	s.Unlock = m(s.Unlock)
}

// Mount configures the mux to serve the policy endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountEvaluateHandler(mux, h.Evaluate)
	MountLockHandler(mux, h.Lock)
	MountUnlockHandler(mux, h.Unlock)
}

// Mount configures the mux to serve the policy endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountEvaluateHandler configures the mux to serve the "policy" service
// "Evaluate" endpoint.
func MountEvaluateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/policy/{group}/{policyName}/{version}/evaluation", f)
	mux.Handle("POST", "/policy/{group}/{policyName}/{version}/evaluation", f)
}

// NewEvaluateHandler creates a HTTP handler which loads the HTTP request and
// calls the "policy" service "Evaluate" endpoint.
func NewEvaluateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeEvaluateRequest(mux, decoder)
		encodeResponse = EncodeEvaluateResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Evaluate")
		ctx = context.WithValue(ctx, goa.ServiceKey, "policy")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountLockHandler configures the mux to serve the "policy" service "Lock"
// endpoint.
func MountLockHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/policy/{group}/{policyName}/{version}/lock", f)
}

// NewLockHandler creates a HTTP handler which loads the HTTP request and calls
// the "policy" service "Lock" endpoint.
func NewLockHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeLockRequest(mux, decoder)
		encodeResponse = EncodeLockResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Lock")
		ctx = context.WithValue(ctx, goa.ServiceKey, "policy")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUnlockHandler configures the mux to serve the "policy" service "Unlock"
// endpoint.
func MountUnlockHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/policy/{group}/{policyName}/{version}/lock", f)
}

// NewUnlockHandler creates a HTTP handler which loads the HTTP request and
// calls the "policy" service "Unlock" endpoint.
func NewUnlockHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUnlockRequest(mux, decoder)
		encodeResponse = EncodeUnlockResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Unlock")
		ctx = context.WithValue(ctx, goa.ServiceKey, "policy")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
