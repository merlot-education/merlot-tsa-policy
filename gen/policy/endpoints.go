// Code generated by goa v3.14.0, DO NOT EDIT.
//
// policy endpoints
//
// Command:
// $ goa gen gitlab.eclipse.org/eclipse/xfsc/tsa/policy/design

package policy

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "policy" service endpoints.
type Endpoints struct {
	Evaluate                 goa.Endpoint
	Validate                 goa.Endpoint
	Lock                     goa.Endpoint
	Unlock                   goa.Endpoint
	ExportBundle             goa.Endpoint
	PolicyPublicKey          goa.Endpoint
	ImportBundle             goa.Endpoint
	ListPolicies             goa.Endpoint
	SetPolicyAutoImport      goa.Endpoint
	SubscribeForPolicyChange goa.Endpoint
}

// ExportBundleResponseData holds both the result and the HTTP response body
// reader of the "ExportBundle" method.
type ExportBundleResponseData struct {
	// Result is the method result.
	Result *ExportBundleResult
	// Body streams the HTTP response body.
	Body io.ReadCloser
}

// ImportBundleRequestData holds both the payload and the HTTP request body
// reader of the "ImportBundle" method.
type ImportBundleRequestData struct {
	// Payload is the method payload.
	Payload *ImportBundlePayload
	// Body streams the HTTP request body.
	Body io.ReadCloser
}

// NewEndpoints wraps the methods of the "policy" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Evaluate:                 NewEvaluateEndpoint(s),
		Validate:                 NewValidateEndpoint(s),
		Lock:                     NewLockEndpoint(s),
		Unlock:                   NewUnlockEndpoint(s),
		ExportBundle:             NewExportBundleEndpoint(s),
		PolicyPublicKey:          NewPolicyPublicKeyEndpoint(s),
		ImportBundle:             NewImportBundleEndpoint(s),
		ListPolicies:             NewListPoliciesEndpoint(s),
		SetPolicyAutoImport:      NewSetPolicyAutoImportEndpoint(s),
		SubscribeForPolicyChange: NewSubscribeForPolicyChangeEndpoint(s),
	}
}

// Use applies the given middleware to all the "policy" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Evaluate = m(e.Evaluate)
	e.Validate = m(e.Validate)
	e.Lock = m(e.Lock)
	e.Unlock = m(e.Unlock)
	e.ExportBundle = m(e.ExportBundle)
	e.PolicyPublicKey = m(e.PolicyPublicKey)
	e.ImportBundle = m(e.ImportBundle)
	e.ListPolicies = m(e.ListPolicies)
	e.SetPolicyAutoImport = m(e.SetPolicyAutoImport)
	e.SubscribeForPolicyChange = m(e.SubscribeForPolicyChange)
}

// NewEvaluateEndpoint returns an endpoint function that calls the method
// "Evaluate" of service "policy".
func NewEvaluateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*EvaluateRequest)
		return s.Evaluate(ctx, p)
	}
}

// NewValidateEndpoint returns an endpoint function that calls the method
// "Validate" of service "policy".
func NewValidateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*EvaluateRequest)
		return s.Validate(ctx, p)
	}
}

// NewLockEndpoint returns an endpoint function that calls the method "Lock" of
// service "policy".
func NewLockEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*LockRequest)
		return nil, s.Lock(ctx, p)
	}
}

// NewUnlockEndpoint returns an endpoint function that calls the method
// "Unlock" of service "policy".
func NewUnlockEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UnlockRequest)
		return nil, s.Unlock(ctx, p)
	}
}

// NewExportBundleEndpoint returns an endpoint function that calls the method
// "ExportBundle" of service "policy".
func NewExportBundleEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ExportBundleRequest)
		res, body, err := s.ExportBundle(ctx, p)
		if err != nil {
			return nil, err
		}
		return &ExportBundleResponseData{Result: res, Body: body}, nil
	}
}

// NewPolicyPublicKeyEndpoint returns an endpoint function that calls the
// method "PolicyPublicKey" of service "policy".
func NewPolicyPublicKeyEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*PolicyPublicKeyRequest)
		return s.PolicyPublicKey(ctx, p)
	}
}

// NewImportBundleEndpoint returns an endpoint function that calls the method
// "ImportBundle" of service "policy".
func NewImportBundleEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*ImportBundleRequestData)
		return s.ImportBundle(ctx, ep.Payload, ep.Body)
	}
}

// NewListPoliciesEndpoint returns an endpoint function that calls the method
// "ListPolicies" of service "policy".
func NewListPoliciesEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*PoliciesRequest)
		return s.ListPolicies(ctx, p)
	}
}

// NewSetPolicyAutoImportEndpoint returns an endpoint function that calls the
// method "SetPolicyAutoImport" of service "policy".
func NewSetPolicyAutoImportEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*SetPolicyImportRequest)
		return s.SetPolicyAutoImport(ctx, p)
	}
}

// NewSubscribeForPolicyChangeEndpoint returns an endpoint function that calls
// the method "SubscribeForPolicyChange" of service "policy".
func NewSubscribeForPolicyChangeEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*SubscribeRequest)
		return s.SubscribeForPolicyChange(ctx, p)
	}
}
