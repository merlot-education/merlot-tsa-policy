// Code generated by goa v3.7.0, DO NOT EDIT.
//
// policy endpoints
//
// Command:
// $ goa gen code.vereign.com/gaiax/tsa/policy/design

package policy

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "policy" service endpoints.
type Endpoints struct {
	Evaluate goa.Endpoint
}

// NewEndpoints wraps the methods of the "policy" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Evaluate: NewEvaluateEndpoint(s),
	}
}

// Use applies the given middleware to all the "policy" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Evaluate = m(e.Evaluate)
}

// NewEvaluateEndpoint returns an endpoint function that calls the method
// "Evaluate" of service "policy".
func NewEvaluateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*EvaluateRequest)
		return s.Evaluate(ctx, p)
	}
}
