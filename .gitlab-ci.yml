variables:
  HELPERS_FILE: docker-build.yml
  HELM_HELPERS_FILE: helm.yml
  APP_HELM_NAME: policy
  DOCKER_FILE: deployment/ci/Dockerfile

stages:
  - compile
  - test
  - build
  - helm
  - deploy

include:
  - project: "${HELPERS_PATH}"
    file: "${HELPERS_FILE}"
  - template: "Workflows/Branch-Pipelines.gitlab-ci.yml"
  - project: "$HELM_HELPERS_PATH}"
    file: "${HELM_HELPERS_FILE}"

lint:
  image: golangci/golangci-lint:latest
  stage: test
  tags:
    - amd64-docker
  script:
    - ln -s /builds /go/src/gitlab.com
    - cd /go/src/gitlab.com/${CI_PROJECT_PATH}
    - golangci-lint --version
    - golangci-lint run
    - cd ./cmd/sync
    - golangci-lint run
  before_script: []

unit tests:
  image: golang:1.20.5
  extends: .gotest
  stage: test
  tags:
    - amd64-docker
  before_script: []
  coverage: '/total:\s+\(statements\)\s+(\d+.\d+\%)/'

govulncheck:
  image: golang:1.20.5
  stage: test
  tags:
    - amd64-docker
  before_script:
    - ln -s /builds /go/src/gitlab.com
    - cd /go/src/gitlab.com/${CI_PROJECT_PATH}
  script:
    - go version
    - go install golang.org/x/vuln/cmd/govulncheck@latest
    - govulncheck ./...

amd64:
  extends: .docker-build
  stage: build
  tags:
    - amd64-docker

dockerize sync:
  stage: build
  tags:
    - amd64-docker
  script:
    - cd ./cmd/sync
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t "${CI_REGISTRY_IMAGE}/sync:${CI_COMMIT_REF_NAME}" .
    - docker push "${CI_REGISTRY_IMAGE}/sync:${CI_COMMIT_REF_NAME}"
  only:
    - main
    - tags
    - integration

helm-lint:
  extends: .helm-lint
  stage: helm
  tags:
    - amd64-docker
